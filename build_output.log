   Compiling fws v0.1.0 (/Users/n/RustroverProjects/fluentcli_web_services)
warning: #[table_name] attribute form is deprecated
  = help: use `#[diesel(table_name = amber_store)]` instead

warning: #[table_name] attribute form is deprecated
  = help: use `#[diesel(table_name = amber_store)]` instead

warning: #[table_name] attribute form is deprecated
  = help: use `#[diesel(table_name = configurations)]` instead

warning: #[table_name] attribute form is deprecated
  = help: use `#[diesel(table_name = configurations)]` instead

warning: #[table_name] attribute form is deprecated
  = help: use `#[diesel(table_name = docker_files)]` instead

warning: #[table_name] attribute form is deprecated
  = help: use `#[diesel(table_name = docker_files)]` instead

warning: #[table_name] attribute form is deprecated
  = help: use `#[diesel(table_name = jobs)]` instead

warning: #[table_name] attribute form is deprecated
  = help: use `#[diesel(table_name = jobs)]` instead

warning: #[table_name] attribute form is deprecated
  = help: use `#[diesel(table_name = pipelines)]` instead

warning: #[table_name] attribute form is deprecated
  = help: use `#[diesel(table_name = pipelines)]` instead

warning: #[table_name] attribute form is deprecated
  = help: use `#[diesel(table_name = secure_vaults)]` instead

warning: #[table_name] attribute form is deprecated
  = help: use `#[diesel(table_name = secure_vaults)]` instead

warning: #[table_name] attribute form is deprecated
  = help: use `#[diesel(table_name = workers)]` instead

warning: #[table_name] attribute form is deprecated
  = help: use `#[diesel(table_name = workers)]` instead

error[E0532]: expected tuple struct or tuple variant, found function `actix_web::error::ErrorForbidden`
  --> src/handlers/chat.rs:69:52
   |
69 |         Err(actix_web::error::BlockingError::Error(actix_web::error::ErrorForbidden(_))) => {
   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a tuple struct or tuple variant

error[E0532]: expected tuple struct or tuple variant, found function `actix_web::error::ErrorForbidden`
  --> src/handlers/chat.rs:99:52
   |
99 |         Err(actix_web::error::BlockingError::Error(actix_web::error::ErrorForbidden(_))) => {
   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a tuple struct or tuple variant

error[E0532]: expected tuple struct or tuple variant, found function `actix_web::error::ErrorForbidden`
   --> src/handlers/chat.rs:124:52
    |
124 |         Err(actix_web::error::BlockingError::Error(actix_web::error::ErrorForbidden(_))) => {
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a tuple struct or tuple variant

error[E0532]: expected tuple struct or tuple variant, found function `actix_web::error::ErrorForbidden`
   --> src/handlers/chat.rs:155:52
    |
155 |         Err(actix_web::error::BlockingError::Error(actix_web::error::ErrorForbidden(_))) => {
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a tuple struct or tuple variant

error[E0532]: expected tuple struct or tuple variant, found function `actix_web::error::ErrorForbidden`
   --> src/handlers/chat.rs:181:52
    |
181 |         Err(actix_web::error::BlockingError::Error(actix_web::error::ErrorForbidden(_))) => {
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a tuple struct or tuple variant

warning: unused import: `dotenv::dotenv`
 --> src/db/db.rs:4:5
  |
4 | use dotenv::dotenv;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `create_db_pool` and `setup_database`
 --> src/db/mod.rs:3:14
  |
3 | pub use db::{create_db_pool, setup_database, DbPool};
  |              ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^

warning: unused import: `uuid::Uuid`
 --> src/models/conversation.rs:5:5
  |
5 | use uuid::Uuid;
  |     ^^^^^^^^^^

warning: unused import: `crate::error::AppError`
 --> src/handlers/amber_store.rs:7:5
  |
7 | use crate::error::AppError;
  |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `web`
 --> src/handlers/api_key.rs:1:17
  |
1 | use actix_web::{web, HttpResponse, Responder};
  |                 ^^^

warning: unused import: `Serialize`
 --> src/handlers/chat.rs:4:26
  |
4 | use serde::{Deserialize, Serialize};
  |                          ^^^^^^^^^

warning: unused import: `Responder`
 --> src/handlers/user.rs:5:43
  |
5 | use actix_web::{web, Error, HttpResponse, Responder};
  |                                           ^^^^^^^^^

warning: unused import: `HttpResponse`
 --> src/routes.rs:6:22
  |
6 | use actix_web::{web, HttpResponse, Scope};
  |                      ^^^^^^^^^^^^

warning: unused import: `update`
 --> src/services/amber_store_service.rs:4:26
  |
4 | use diesel::{prelude::*, update};
  |                          ^^^^^^

warning: unused imports: `attachments`, `conversations`, `llm_providers`, `messages`, and `user_llm_configs`
 --> src/services/chat_service.rs:7:21
  |
7 | use crate::schema::{attachments, conversations, llm_providers, messages, user_llm_configs};
  |                     ^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^  ^^^^^^^^^^^^^^^^

warning: unused import: `crate::handlers::user`
 --> src/services/job_service.rs:3:5
  |
3 | use crate::handlers::user;
  |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::fmt::Debug`
  --> src/services/job_service.rs:10:5
   |
10 | use std::fmt::Debug;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `tempfile::NamedTempFile`
  --> src/services/job_service.rs:11:5
   |
11 | use tempfile::NamedTempFile;
   |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `tokio::fs::File`
  --> src/services/job_service.rs:13:5
   |
13 | use tokio::fs::File;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `tokio::io::AsyncWriteExt`
  --> src/services/job_service.rs:14:5
   |
14 | use tokio::io::AsyncWriteExt;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `serde_yaml`
 --> src/services/pipeline_service.rs:5:5
  |
5 | use serde_yaml;
  |     ^^^^^^^^^^

warning: unused import: `actix_web::HttpMessage`
 --> src/services/user_service.rs:6:5
  |
6 | use actix_web::HttpMessage;
  |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `chrono::Utc`
 --> src/services/user_service.rs:7:5
  |
7 | use chrono::Utc;
  |     ^^^^^^^^^^^

warning: unused import: `std::fmt::Debug`
 --> src/services/user_service.rs:9:5
  |
9 | use std::fmt::Debug;
  |     ^^^^^^^^^^^^^^^

error[E0277]: the trait bound `diesel::result::Error: active_worker::_::_serde::Serialize` is not satisfied
   --> src/handlers/chat.rs:48:53
    |
48  |         Ok(conversation) => HttpResponse::Ok().json(conversation),
    |                                                ---- ^^^^^^^^^^^^ the trait `active_worker::_::_serde::Serialize` is not implemented for `diesel::result::Error`, which is required by `Result<Conversation, diesel::result::Error>: active_worker::_::_serde::Serialize`
    |                                                |
    |                                                required by a bound introduced by this call
    |
    = note: for local types consider adding `#[derive(serde::Serialize)]` to your `diesel::result::Error` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `active_worker::_::_serde::Serialize`:
              &'a T
              &'a mut T
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
              (T0, T1, T2, T3, T4)
            and 191 others
    = note: required for `Result<Conversation, diesel::result::Error>` to implement `active_worker::_::_serde::Serialize`
note: required by a bound in `HttpResponseBuilder::json`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/response/builder.rs:333:40
    |
333 |     pub fn json(&mut self, value: impl Serialize) -> HttpResponse {
    |                                        ^^^^^^^^^ required by this bound in `HttpResponseBuilder::json`

error[E0277]: `(dyn ResponseError + 'static)` cannot be sent between threads safely
   --> src/handlers/chat.rs:58:18
    |
58  |       let result = web::block(move || {
    |  __________________^
59  | |         let conversation = ChatService::get_conversation(&pool, conversation_id.into_inner())?;
60  | |         if conversation.user_id != *user_id {
61  | |             return Err(actix_web::error::ErrorForbidden("Access denied"));
62  | |         }
63  | |         Ok(conversation)
64  | |     })
    | |______^ `(dyn ResponseError + 'static)` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn ResponseError + 'static)`, which is required by `Result<_, actix_web::Error>: std::marker::Send`
    = note: required for `Unique<(dyn ResponseError + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn ResponseError + 'static)>`
   --> /private/tmp/rust-20240727-10035-rzi7qi/rustc-1.80.0-src/library/alloc/src/boxed.rs:237:12
note: required because it appears within the type `actix_web::Error`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/error/error.rs:15:12
    |
15  | pub struct Error {
    |            ^^^^^
note: required because it appears within the type `Result<_, actix_web::Error>`
   --> /private/tmp/rust-20240727-10035-rzi7qi/rustc-1.80.0-src/library/core/src/result.rs:527:10
note: required by a bound in `block`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/web.rs:211:8
    |
208 | pub fn block<F, R>(f: F) -> impl Future<Output = Result<R, BlockingError>>
    |        ----- required by a bound in this function
...
211 |     R: Send + 'static,
    |        ^^^^ required by this bound in `block`

error[E0277]: the trait bound `diesel::result::Error: ResponseError` is not satisfied
  --> src/handlers/chat.rs:59:94
   |
59 |         let conversation = ChatService::get_conversation(&pool, conversation_id.into_inner())?;
   |                                                                                              ^ the trait `ResponseError` is not implemented for `diesel::result::Error`, which is required by `Result<_, actix_web::Error>: FromResidual<Result<Infallible, diesel::result::Error>>`
   |
   = help: the following other types implement trait `ResponseError`:
             AppError
             BlockingError
             Box<(dyn StdError + 'static)>
             HttpError
             Infallible
             JsonPayloadError
             PathError
             PayloadError
           and 18 others
   = note: required for `actix_web::Error` to implement `std::convert::From<diesel::result::Error>`
   = note: required for `Result<_, actix_web::Error>` to implement `FromResidual<Result<Infallible, diesel::result::Error>>`

error[E0277]: `(dyn ResponseError + 'static)` cannot be sent between threads safely
   --> src/handlers/chat.rs:65:6
    |
65  |     .await;
    |      ^^^^^ `(dyn ResponseError + 'static)` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn ResponseError + 'static)`, which is required by `Result<Conversation, actix_web::Error>: std::marker::Send`
    = note: required for `Unique<(dyn ResponseError + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn ResponseError + 'static)>`
   --> /private/tmp/rust-20240727-10035-rzi7qi/rustc-1.80.0-src/library/alloc/src/boxed.rs:237:12
note: required because it appears within the type `actix_web::Error`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/error/error.rs:15:12
    |
15  | pub struct Error {
    |            ^^^^^
note: required because it appears within the type `Result<Conversation, actix_web::Error>`
   --> /private/tmp/rust-20240727-10035-rzi7qi/rustc-1.80.0-src/library/core/src/result.rs:527:10
note: required by a bound in `block`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/web.rs:211:8
    |
208 | pub fn block<F, R>(f: F) -> impl Future<Output = Result<R, BlockingError>>
    |        ----- required by a bound in this function
...
211 |     R: Send + 'static,
    |        ^^^^ required by this bound in `block`

error[E0599]: no associated item named `Error` found for struct `BlockingError` in the current scope
  --> src/handlers/chat.rs:69:46
   |
69 |         Err(actix_web::error::BlockingError::Error(actix_web::error::ErrorForbidden(_))) => {
   |                                              ^^^^^ associated item not found in `BlockingError`

error[E0277]: the trait bound `actix_web::Error: active_worker::_::_serde::Serialize` is not satisfied
   --> src/handlers/chat.rs:68:53
    |
68  |         Ok(conversation) => HttpResponse::Ok().json(conversation),
    |                                                ---- ^^^^^^^^^^^^ the trait `active_worker::_::_serde::Serialize` is not implemented for `actix_web::Error`, which is required by `Result<Conversation, actix_web::Error>: active_worker::_::_serde::Serialize`
    |                                                |
    |                                                required by a bound introduced by this call
    |
    = note: for local types consider adding `#[derive(serde::Serialize)]` to your `actix_web::Error` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `active_worker::_::_serde::Serialize`:
              &'a T
              &'a mut T
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
              (T0, T1, T2, T3, T4)
            and 191 others
    = note: required for `Result<Conversation, actix_web::Error>` to implement `active_worker::_::_serde::Serialize`
note: required by a bound in `HttpResponseBuilder::json`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/response/builder.rs:333:40
    |
333 |     pub fn json(&mut self, value: impl Serialize) -> HttpResponse {
    |                                        ^^^^^^^^^ required by this bound in `HttpResponseBuilder::json`

error[E0277]: `(dyn ResponseError + 'static)` cannot be sent between threads safely
   --> src/handlers/chat.rs:81:18
    |
81  |       let result = web::block(move || {
    |  __________________^
82  | |         // Check if the user owns the conversation
83  | |         let conversation = ChatService::get_conversation(&pool, req.conversation_id)?;
84  | |         if conversation.user_id != *user_id {
...   |
93  | |         )
94  | |     })
    | |______^ `(dyn ResponseError + 'static)` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn ResponseError + 'static)`, which is required by `Result<_, actix_web::Error>: std::marker::Send`
    = note: required for `Unique<(dyn ResponseError + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn ResponseError + 'static)>`
   --> /private/tmp/rust-20240727-10035-rzi7qi/rustc-1.80.0-src/library/alloc/src/boxed.rs:237:12
note: required because it appears within the type `actix_web::Error`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/error/error.rs:15:12
    |
15  | pub struct Error {
    |            ^^^^^
note: required because it appears within the type `Result<_, actix_web::Error>`
   --> /private/tmp/rust-20240727-10035-rzi7qi/rustc-1.80.0-src/library/core/src/result.rs:527:10
note: required by a bound in `block`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/web.rs:211:8
    |
208 | pub fn block<F, R>(f: F) -> impl Future<Output = Result<R, BlockingError>>
    |        ----- required by a bound in this function
...
211 |     R: Send + 'static,
    |        ^^^^ required by this bound in `block`

error[E0277]: the trait bound `diesel::result::Error: ResponseError` is not satisfied
  --> src/handlers/chat.rs:83:85
   |
83 |         let conversation = ChatService::get_conversation(&pool, req.conversation_id)?;
   |                                                                                     ^ the trait `ResponseError` is not implemented for `diesel::result::Error`, which is required by `Result<_, actix_web::Error>: FromResidual<Result<Infallible, diesel::result::Error>>`
   |
   = help: the following other types implement trait `ResponseError`:
             AppError
             BlockingError
             Box<(dyn StdError + 'static)>
             HttpError
             Infallible
             JsonPayloadError
             PathError
             PayloadError
           and 18 others
   = note: required for `actix_web::Error` to implement `std::convert::From<diesel::result::Error>`
   = note: required for `Result<_, actix_web::Error>` to implement `FromResidual<Result<Infallible, diesel::result::Error>>`

error[E0308]: mismatched types
  --> src/handlers/chat.rs:88:9
   |
88 | /         ChatService::create_message(
89 | |             &pool,
90 | |             req.conversation_id,
91 | |             req.role.clone(),
92 | |             req.content.clone(),
93 | |         )
   | |_________^ expected `Result<_, Error>`, found `Result<Message, Error>`
   |
   = note: `diesel::result::Error` and `actix_web::Error` have similar names, but are actually distinct types
note: `diesel::result::Error` is defined in crate `diesel`
  --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.3/src/result.rs:14:1
   |
14 | pub enum Error {
   | ^^^^^^^^^^^^^^
note: `actix_web::Error` is defined in crate `actix_web`
  --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/error/error.rs:15:1
   |
15 | pub struct Error {
   | ^^^^^^^^^^^^^^^^
note: return type inferred to be `Result<_, actix_web::Error>` here
  --> src/handlers/chat.rs:83:28
   |
83 |         let conversation = ChatService::get_conversation(&pool, req.conversation_id)?;
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: try wrapping the expression in `Ok`
   |
88 ~         Ok(ChatService::create_message(
89 |             &pool,
 ...
92 |             req.content.clone(),
93 ~         ))
   |

error[E0277]: `(dyn ResponseError + 'static)` cannot be sent between threads safely
   --> src/handlers/chat.rs:95:6
    |
95  |     .await;
    |      ^^^^^ `(dyn ResponseError + 'static)` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn ResponseError + 'static)`, which is required by `Result<_, actix_web::Error>: std::marker::Send`
    = note: required for `Unique<(dyn ResponseError + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn ResponseError + 'static)>`
   --> /private/tmp/rust-20240727-10035-rzi7qi/rustc-1.80.0-src/library/alloc/src/boxed.rs:237:12
note: required because it appears within the type `actix_web::Error`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/error/error.rs:15:12
    |
15  | pub struct Error {
    |            ^^^^^
note: required because it appears within the type `Result<_, actix_web::Error>`
   --> /private/tmp/rust-20240727-10035-rzi7qi/rustc-1.80.0-src/library/core/src/result.rs:527:10
note: required by a bound in `block`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/web.rs:211:8
    |
208 | pub fn block<F, R>(f: F) -> impl Future<Output = Result<R, BlockingError>>
    |        ----- required by a bound in this function
...
211 |     R: Send + 'static,
    |        ^^^^ required by this bound in `block`

error[E0599]: no associated item named `Error` found for struct `BlockingError` in the current scope
  --> src/handlers/chat.rs:99:46
   |
99 |         Err(actix_web::error::BlockingError::Error(actix_web::error::ErrorForbidden(_))) => {
   |                                              ^^^^^ associated item not found in `BlockingError`

error[E0277]: the trait bound `actix_web::Error: active_worker::_::_serde::Serialize` is not satisfied
   --> src/handlers/chat.rs:98:48
    |
98  |         Ok(message) => HttpResponse::Ok().json(message),
    |                                           ---- ^^^^^^^ the trait `active_worker::_::_serde::Serialize` is not implemented for `actix_web::Error`, which is required by `Result<_, actix_web::Error>: active_worker::_::_serde::Serialize`
    |                                           |
    |                                           required by a bound introduced by this call
    |
    = note: for local types consider adding `#[derive(serde::Serialize)]` to your `actix_web::Error` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `active_worker::_::_serde::Serialize`:
              &'a T
              &'a mut T
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
              (T0, T1, T2, T3, T4)
            and 191 others
    = note: required for `Result<_, actix_web::Error>` to implement `active_worker::_::_serde::Serialize`
note: required by a bound in `HttpResponseBuilder::json`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/response/builder.rs:333:40
    |
333 |     pub fn json(&mut self, value: impl Serialize) -> HttpResponse {
    |                                        ^^^^^^^^^ required by this bound in `HttpResponseBuilder::json`

error[E0277]: `(dyn ResponseError + 'static)` cannot be sent between threads safely
   --> src/handlers/chat.rs:111:18
    |
111 |       let result = web::block(move || {
    |  __________________^
112 | |         // Check if the user owns the conversation
113 | |         let conversation = ChatService::get_conversation(&pool, conversation_id.into_inner())?;
114 | |         if conversation.user_id != *user_id {
...   |
118 | |         ChatService::get_messages(&pool, conversation_id.into_inner())
119 | |     })
    | |______^ `(dyn ResponseError + 'static)` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn ResponseError + 'static)`, which is required by `Result<_, actix_web::Error>: std::marker::Send`
    = note: required for `Unique<(dyn ResponseError + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn ResponseError + 'static)>`
   --> /private/tmp/rust-20240727-10035-rzi7qi/rustc-1.80.0-src/library/alloc/src/boxed.rs:237:12
note: required because it appears within the type `actix_web::Error`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/error/error.rs:15:12
    |
15  | pub struct Error {
    |            ^^^^^
note: required because it appears within the type `Result<_, actix_web::Error>`
   --> /private/tmp/rust-20240727-10035-rzi7qi/rustc-1.80.0-src/library/core/src/result.rs:527:10
note: required by a bound in `block`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/web.rs:211:8
    |
208 | pub fn block<F, R>(f: F) -> impl Future<Output = Result<R, BlockingError>>
    |        ----- required by a bound in this function
...
211 |     R: Send + 'static,
    |        ^^^^ required by this bound in `block`

error[E0277]: the trait bound `diesel::result::Error: ResponseError` is not satisfied
   --> src/handlers/chat.rs:113:94
    |
113 |         let conversation = ChatService::get_conversation(&pool, conversation_id.into_inner())?;
    |                                                                                              ^ the trait `ResponseError` is not implemented for `diesel::result::Error`, which is required by `Result<_, actix_web::Error>: FromResidual<Result<Infallible, diesel::result::Error>>`
    |
    = help: the following other types implement trait `ResponseError`:
              AppError
              BlockingError
              Box<(dyn StdError + 'static)>
              HttpError
              Infallible
              JsonPayloadError
              PathError
              PayloadError
            and 18 others
    = note: required for `actix_web::Error` to implement `std::convert::From<diesel::result::Error>`
    = note: required for `Result<_, actix_web::Error>` to implement `FromResidual<Result<Infallible, diesel::result::Error>>`

error[E0308]: mismatched types
   --> src/handlers/chat.rs:118:9
    |
118 |         ChatService::get_messages(&pool, conversation_id.into_inner())
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<_, Error>`, found `Result<Vec<Message>, Error>`
    |
    = note: `diesel::result::Error` and `actix_web::Error` have similar names, but are actually distinct types
note: `diesel::result::Error` is defined in crate `diesel`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.3/src/result.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
note: `actix_web::Error` is defined in crate `actix_web`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/error/error.rs:15:1
    |
15  | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: return type inferred to be `Result<_, actix_web::Error>` here
   --> src/handlers/chat.rs:113:28
    |
113 |         let conversation = ChatService::get_conversation(&pool, conversation_id.into_inner())?;
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: try wrapping the expression in `Ok`
    |
118 |         Ok(ChatService::get_messages(&pool, conversation_id.into_inner()))
    |         +++                                                              +

error[E0277]: `(dyn ResponseError + 'static)` cannot be sent between threads safely
   --> src/handlers/chat.rs:120:6
    |
120 |     .await;
    |      ^^^^^ `(dyn ResponseError + 'static)` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn ResponseError + 'static)`, which is required by `Result<_, actix_web::Error>: std::marker::Send`
    = note: required for `Unique<(dyn ResponseError + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn ResponseError + 'static)>`
   --> /private/tmp/rust-20240727-10035-rzi7qi/rustc-1.80.0-src/library/alloc/src/boxed.rs:237:12
note: required because it appears within the type `actix_web::Error`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/error/error.rs:15:12
    |
15  | pub struct Error {
    |            ^^^^^
note: required because it appears within the type `Result<_, actix_web::Error>`
   --> /private/tmp/rust-20240727-10035-rzi7qi/rustc-1.80.0-src/library/core/src/result.rs:527:10
note: required by a bound in `block`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/web.rs:211:8
    |
208 | pub fn block<F, R>(f: F) -> impl Future<Output = Result<R, BlockingError>>
    |        ----- required by a bound in this function
...
211 |     R: Send + 'static,
    |        ^^^^ required by this bound in `block`

error[E0599]: no associated item named `Error` found for struct `BlockingError` in the current scope
   --> src/handlers/chat.rs:124:46
    |
124 |         Err(actix_web::error::BlockingError::Error(actix_web::error::ErrorForbidden(_))) => {
    |                                              ^^^^^ associated item not found in `BlockingError`

error[E0277]: the trait bound `actix_web::Error: active_worker::_::_serde::Serialize` is not satisfied
   --> src/handlers/chat.rs:123:49
    |
123 |         Ok(messages) => HttpResponse::Ok().json(messages),
    |                                            ---- ^^^^^^^^ the trait `active_worker::_::_serde::Serialize` is not implemented for `actix_web::Error`, which is required by `Result<_, actix_web::Error>: active_worker::_::_serde::Serialize`
    |                                            |
    |                                            required by a bound introduced by this call
    |
    = note: for local types consider adding `#[derive(serde::Serialize)]` to your `actix_web::Error` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `active_worker::_::_serde::Serialize`:
              &'a T
              &'a mut T
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
              (T0, T1, T2, T3, T4)
            and 191 others
    = note: required for `Result<_, actix_web::Error>` to implement `active_worker::_::_serde::Serialize`
note: required by a bound in `HttpResponseBuilder::json`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/response/builder.rs:333:40
    |
333 |     pub fn json(&mut self, value: impl Serialize) -> HttpResponse {
    |                                        ^^^^^^^^^ required by this bound in `HttpResponseBuilder::json`

error[E0277]: `(dyn ResponseError + 'static)` cannot be sent between threads safely
   --> src/handlers/chat.rs:136:18
    |
136 |       let result = web::block(move || {
    |  __________________^
137 | |         // Check if the user owns the message's conversation
138 | |         let message = ChatService::get_message(&pool, req.message_id)?;
139 | |         let conversation = ChatService::get_conversation(&pool, message.conversation_id)?;
...   |
149 | |         )
150 | |     })
    | |______^ `(dyn ResponseError + 'static)` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn ResponseError + 'static)`, which is required by `Result<_, actix_web::Error>: std::marker::Send`
    = note: required for `Unique<(dyn ResponseError + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn ResponseError + 'static)>`
   --> /private/tmp/rust-20240727-10035-rzi7qi/rustc-1.80.0-src/library/alloc/src/boxed.rs:237:12
note: required because it appears within the type `actix_web::Error`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/error/error.rs:15:12
    |
15  | pub struct Error {
    |            ^^^^^
note: required because it appears within the type `Result<_, actix_web::Error>`
   --> /private/tmp/rust-20240727-10035-rzi7qi/rustc-1.80.0-src/library/core/src/result.rs:527:10
note: required by a bound in `block`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/web.rs:211:8
    |
208 | pub fn block<F, R>(f: F) -> impl Future<Output = Result<R, BlockingError>>
    |        ----- required by a bound in this function
...
211 |     R: Send + 'static,
    |        ^^^^ required by this bound in `block`

error[E0277]: the trait bound `diesel::result::Error: ResponseError` is not satisfied
   --> src/handlers/chat.rs:139:89
    |
139 |         let conversation = ChatService::get_conversation(&pool, message.conversation_id)?;
    |                                                                                         ^ the trait `ResponseError` is not implemented for `diesel::result::Error`, which is required by `Result<_, actix_web::Error>: FromResidual<Result<Infallible, diesel::result::Error>>`
    |
    = help: the following other types implement trait `ResponseError`:
              AppError
              BlockingError
              Box<(dyn StdError + 'static)>
              HttpError
              Infallible
              JsonPayloadError
              PathError
              PayloadError
            and 18 others
    = note: required for `actix_web::Error` to implement `std::convert::From<diesel::result::Error>`
    = note: required for `Result<_, actix_web::Error>` to implement `FromResidual<Result<Infallible, diesel::result::Error>>`

error[E0277]: the trait bound `diesel::result::Error: ResponseError` is not satisfied
   --> src/handlers/chat.rs:138:70
    |
138 |         let message = ChatService::get_message(&pool, req.message_id)?;
    |                                                                      ^ the trait `ResponseError` is not implemented for `diesel::result::Error`, which is required by `Result<_, actix_web::Error>: FromResidual<Result<Infallible, diesel::result::Error>>`
    |
    = help: the following other types implement trait `ResponseError`:
              AppError
              BlockingError
              Box<(dyn StdError + 'static)>
              HttpError
              Infallible
              JsonPayloadError
              PathError
              PayloadError
            and 18 others
    = note: required for `actix_web::Error` to implement `std::convert::From<diesel::result::Error>`
    = note: required for `Result<_, actix_web::Error>` to implement `FromResidual<Result<Infallible, diesel::result::Error>>`

error[E0308]: mismatched types
   --> src/handlers/chat.rs:144:9
    |
144 | /         ChatService::create_attachment(
145 | |             &pool,
146 | |             req.message_id,
147 | |             req.file_type.clone(),
148 | |             req.file_path.clone(),
149 | |         )
    | |_________^ expected `Result<_, Error>`, found `Result<Attachment, Error>`
    |
    = note: `diesel::result::Error` and `actix_web::Error` have similar names, but are actually distinct types
note: `diesel::result::Error` is defined in crate `diesel`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.3/src/result.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
note: `actix_web::Error` is defined in crate `actix_web`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/error/error.rs:15:1
    |
15  | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: return type inferred to be `Result<_, actix_web::Error>` here
   --> src/handlers/chat.rs:138:23
    |
138 |         let message = ChatService::get_message(&pool, req.message_id)?;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: try wrapping the expression in `Ok`
    |
144 ~         Ok(ChatService::create_attachment(
145 |             &pool,
  ...
148 |             req.file_path.clone(),
149 ~         ))
    |

error[E0277]: `(dyn ResponseError + 'static)` cannot be sent between threads safely
   --> src/handlers/chat.rs:151:6
    |
151 |     .await;
    |      ^^^^^ `(dyn ResponseError + 'static)` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn ResponseError + 'static)`, which is required by `Result<_, actix_web::Error>: std::marker::Send`
    = note: required for `Unique<(dyn ResponseError + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn ResponseError + 'static)>`
   --> /private/tmp/rust-20240727-10035-rzi7qi/rustc-1.80.0-src/library/alloc/src/boxed.rs:237:12
note: required because it appears within the type `actix_web::Error`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/error/error.rs:15:12
    |
15  | pub struct Error {
    |            ^^^^^
note: required because it appears within the type `Result<_, actix_web::Error>`
   --> /private/tmp/rust-20240727-10035-rzi7qi/rustc-1.80.0-src/library/core/src/result.rs:527:10
note: required by a bound in `block`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/web.rs:211:8
    |
208 | pub fn block<F, R>(f: F) -> impl Future<Output = Result<R, BlockingError>>
    |        ----- required by a bound in this function
...
211 |     R: Send + 'static,
    |        ^^^^ required by this bound in `block`

error[E0599]: no associated item named `Error` found for struct `BlockingError` in the current scope
   --> src/handlers/chat.rs:155:46
    |
155 |         Err(actix_web::error::BlockingError::Error(actix_web::error::ErrorForbidden(_))) => {
    |                                              ^^^^^ associated item not found in `BlockingError`

error[E0277]: the trait bound `actix_web::Error: active_worker::_::_serde::Serialize` is not satisfied
   --> src/handlers/chat.rs:154:51
    |
154 |         Ok(attachment) => HttpResponse::Ok().json(attachment),
    |                                              ---- ^^^^^^^^^^ the trait `active_worker::_::_serde::Serialize` is not implemented for `actix_web::Error`, which is required by `Result<_, actix_web::Error>: active_worker::_::_serde::Serialize`
    |                                              |
    |                                              required by a bound introduced by this call
    |
    = note: for local types consider adding `#[derive(serde::Serialize)]` to your `actix_web::Error` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `active_worker::_::_serde::Serialize`:
              &'a T
              &'a mut T
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
              (T0, T1, T2, T3, T4)
            and 191 others
    = note: required for `Result<_, actix_web::Error>` to implement `active_worker::_::_serde::Serialize`
note: required by a bound in `HttpResponseBuilder::json`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/response/builder.rs:333:40
    |
333 |     pub fn json(&mut self, value: impl Serialize) -> HttpResponse {
    |                                        ^^^^^^^^^ required by this bound in `HttpResponseBuilder::json`

error[E0277]: `(dyn ResponseError + 'static)` cannot be sent between threads safely
   --> src/handlers/chat.rs:167:18
    |
167 |       let result = web::block(move || {
    |  __________________^
168 | |         // Check if the user owns the message's conversation
169 | |         let message = ChatService::get_message(&pool, message_id.into_inner())?;
170 | |         let conversation = ChatService::get_conversation(&pool, message.conversation_id)?;
...   |
175 | |         ChatService::get_attachments(&pool, message_id.into_inner())
176 | |     })
    | |______^ `(dyn ResponseError + 'static)` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn ResponseError + 'static)`, which is required by `Result<_, actix_web::Error>: std::marker::Send`
    = note: required for `Unique<(dyn ResponseError + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn ResponseError + 'static)>`
   --> /private/tmp/rust-20240727-10035-rzi7qi/rustc-1.80.0-src/library/alloc/src/boxed.rs:237:12
note: required because it appears within the type `actix_web::Error`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/error/error.rs:15:12
    |
15  | pub struct Error {
    |            ^^^^^
note: required because it appears within the type `Result<_, actix_web::Error>`
   --> /private/tmp/rust-20240727-10035-rzi7qi/rustc-1.80.0-src/library/core/src/result.rs:527:10
note: required by a bound in `block`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/web.rs:211:8
    |
208 | pub fn block<F, R>(f: F) -> impl Future<Output = Result<R, BlockingError>>
    |        ----- required by a bound in this function
...
211 |     R: Send + 'static,
    |        ^^^^ required by this bound in `block`

error[E0277]: the trait bound `diesel::result::Error: ResponseError` is not satisfied
   --> src/handlers/chat.rs:170:89
    |
170 |         let conversation = ChatService::get_conversation(&pool, message.conversation_id)?;
    |                                                                                         ^ the trait `ResponseError` is not implemented for `diesel::result::Error`, which is required by `Result<_, actix_web::Error>: FromResidual<Result<Infallible, diesel::result::Error>>`
    |
    = help: the following other types implement trait `ResponseError`:
              AppError
              BlockingError
              Box<(dyn StdError + 'static)>
              HttpError
              Infallible
              JsonPayloadError
              PathError
              PayloadError
            and 18 others
    = note: required for `actix_web::Error` to implement `std::convert::From<diesel::result::Error>`
    = note: required for `Result<_, actix_web::Error>` to implement `FromResidual<Result<Infallible, diesel::result::Error>>`

error[E0277]: the trait bound `diesel::result::Error: ResponseError` is not satisfied
   --> src/handlers/chat.rs:169:79
    |
169 |         let message = ChatService::get_message(&pool, message_id.into_inner())?;
    |                                                                               ^ the trait `ResponseError` is not implemented for `diesel::result::Error`, which is required by `Result<_, actix_web::Error>: FromResidual<Result<Infallible, diesel::result::Error>>`
    |
    = help: the following other types implement trait `ResponseError`:
              AppError
              BlockingError
              Box<(dyn StdError + 'static)>
              HttpError
              Infallible
              JsonPayloadError
              PathError
              PayloadError
            and 18 others
    = note: required for `actix_web::Error` to implement `std::convert::From<diesel::result::Error>`
    = note: required for `Result<_, actix_web::Error>` to implement `FromResidual<Result<Infallible, diesel::result::Error>>`

error[E0308]: mismatched types
   --> src/handlers/chat.rs:175:9
    |
175 |         ChatService::get_attachments(&pool, message_id.into_inner())
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<_, Error>`, found `Result<Vec<Attachment>, Error>`
    |
    = note: `diesel::result::Error` and `actix_web::Error` have similar names, but are actually distinct types
note: `diesel::result::Error` is defined in crate `diesel`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.3/src/result.rs:14:1
    |
14  | pub enum Error {
    | ^^^^^^^^^^^^^^
note: `actix_web::Error` is defined in crate `actix_web`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/error/error.rs:15:1
    |
15  | pub struct Error {
    | ^^^^^^^^^^^^^^^^
note: return type inferred to be `Result<_, actix_web::Error>` here
   --> src/handlers/chat.rs:169:23
    |
169 |         let message = ChatService::get_message(&pool, message_id.into_inner())?;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: try wrapping the expression in `Ok`
    |
175 |         Ok(ChatService::get_attachments(&pool, message_id.into_inner()))
    |         +++                                                            +

error[E0277]: `(dyn ResponseError + 'static)` cannot be sent between threads safely
   --> src/handlers/chat.rs:177:6
    |
177 |     .await;
    |      ^^^^^ `(dyn ResponseError + 'static)` cannot be sent between threads safely
    |
    = help: the trait `std::marker::Send` is not implemented for `(dyn ResponseError + 'static)`, which is required by `Result<_, actix_web::Error>: std::marker::Send`
    = note: required for `Unique<(dyn ResponseError + 'static)>` to implement `std::marker::Send`
note: required because it appears within the type `Box<(dyn ResponseError + 'static)>`
   --> /private/tmp/rust-20240727-10035-rzi7qi/rustc-1.80.0-src/library/alloc/src/boxed.rs:237:12
note: required because it appears within the type `actix_web::Error`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/error/error.rs:15:12
    |
15  | pub struct Error {
    |            ^^^^^
note: required because it appears within the type `Result<_, actix_web::Error>`
   --> /private/tmp/rust-20240727-10035-rzi7qi/rustc-1.80.0-src/library/core/src/result.rs:527:10
note: required by a bound in `block`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/web.rs:211:8
    |
208 | pub fn block<F, R>(f: F) -> impl Future<Output = Result<R, BlockingError>>
    |        ----- required by a bound in this function
...
211 |     R: Send + 'static,
    |        ^^^^ required by this bound in `block`

error[E0599]: no associated item named `Error` found for struct `BlockingError` in the current scope
   --> src/handlers/chat.rs:181:46
    |
181 |         Err(actix_web::error::BlockingError::Error(actix_web::error::ErrorForbidden(_))) => {
    |                                              ^^^^^ associated item not found in `BlockingError`

error[E0277]: the trait bound `actix_web::Error: active_worker::_::_serde::Serialize` is not satisfied
   --> src/handlers/chat.rs:180:52
    |
180 |         Ok(attachments) => HttpResponse::Ok().json(attachments),
    |                                               ---- ^^^^^^^^^^^ the trait `active_worker::_::_serde::Serialize` is not implemented for `actix_web::Error`, which is required by `Result<_, actix_web::Error>: active_worker::_::_serde::Serialize`
    |                                               |
    |                                               required by a bound introduced by this call
    |
    = note: for local types consider adding `#[derive(serde::Serialize)]` to your `actix_web::Error` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `active_worker::_::_serde::Serialize`:
              &'a T
              &'a mut T
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
              (T0, T1, T2, T3, T4)
            and 191 others
    = note: required for `Result<_, actix_web::Error>` to implement `active_worker::_::_serde::Serialize`
note: required by a bound in `HttpResponseBuilder::json`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/response/builder.rs:333:40
    |
333 |     pub fn json(&mut self, value: impl Serialize) -> HttpResponse {
    |                                        ^^^^^^^^^ required by this bound in `HttpResponseBuilder::json`

error[E0277]: the trait bound `diesel::result::Error: active_worker::_::_serde::Serialize` is not satisfied
   --> src/handlers/chat.rs:199:49
    |
199 |         Ok(provider) => HttpResponse::Ok().json(provider),
    |                                            ---- ^^^^^^^^ the trait `active_worker::_::_serde::Serialize` is not implemented for `diesel::result::Error`, which is required by `Result<LLMProvider, diesel::result::Error>: active_worker::_::_serde::Serialize`
    |                                            |
    |                                            required by a bound introduced by this call
    |
    = note: for local types consider adding `#[derive(serde::Serialize)]` to your `diesel::result::Error` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `active_worker::_::_serde::Serialize`:
              &'a T
              &'a mut T
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
              (T0, T1, T2, T3, T4)
            and 191 others
    = note: required for `Result<LLMProvider, diesel::result::Error>` to implement `active_worker::_::_serde::Serialize`
note: required by a bound in `HttpResponseBuilder::json`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/response/builder.rs:333:40
    |
333 |     pub fn json(&mut self, value: impl Serialize) -> HttpResponse {
    |                                        ^^^^^^^^^ required by this bound in `HttpResponseBuilder::json`

error[E0277]: the trait bound `diesel::result::Error: active_worker::_::_serde::Serialize` is not satisfied
   --> src/handlers/chat.rs:213:49
    |
213 |         Ok(provider) => HttpResponse::Ok().json(provider),
    |                                            ---- ^^^^^^^^ the trait `active_worker::_::_serde::Serialize` is not implemented for `diesel::result::Error`, which is required by `Result<LLMProvider, diesel::result::Error>: active_worker::_::_serde::Serialize`
    |                                            |
    |                                            required by a bound introduced by this call
    |
    = note: for local types consider adding `#[derive(serde::Serialize)]` to your `diesel::result::Error` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `active_worker::_::_serde::Serialize`:
              &'a T
              &'a mut T
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
              (T0, T1, T2, T3, T4)
            and 191 others
    = note: required for `Result<LLMProvider, diesel::result::Error>` to implement `active_worker::_::_serde::Serialize`
note: required by a bound in `HttpResponseBuilder::json`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/response/builder.rs:333:40
    |
333 |     pub fn json(&mut self, value: impl Serialize) -> HttpResponse {
    |                                        ^^^^^^^^^ required by this bound in `HttpResponseBuilder::json`

error[E0277]: the trait bound `diesel::result::Error: active_worker::_::_serde::Serialize` is not satisfied
   --> src/handlers/chat.rs:229:47
    |
229 |         Ok(config) => HttpResponse::Ok().json(config),
    |                                          ---- ^^^^^^ the trait `active_worker::_::_serde::Serialize` is not implemented for `diesel::result::Error`, which is required by `Result<UserLLMConfig, diesel::result::Error>: active_worker::_::_serde::Serialize`
    |                                          |
    |                                          required by a bound introduced by this call
    |
    = note: for local types consider adding `#[derive(serde::Serialize)]` to your `diesel::result::Error` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `active_worker::_::_serde::Serialize`:
              &'a T
              &'a mut T
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
              (T0, T1, T2, T3, T4)
            and 191 others
    = note: required for `Result<UserLLMConfig, diesel::result::Error>` to implement `active_worker::_::_serde::Serialize`
note: required by a bound in `HttpResponseBuilder::json`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/response/builder.rs:333:40
    |
333 |     pub fn json(&mut self, value: impl Serialize) -> HttpResponse {
    |                                        ^^^^^^^^^ required by this bound in `HttpResponseBuilder::json`

error[E0277]: the trait bound `diesel::result::Error: active_worker::_::_serde::Serialize` is not satisfied
   --> src/handlers/chat.rs:245:47
    |
245 |         Ok(config) => HttpResponse::Ok().json(config),
    |                                          ---- ^^^^^^ the trait `active_worker::_::_serde::Serialize` is not implemented for `diesel::result::Error`, which is required by `Result<UserLLMConfig, diesel::result::Error>: active_worker::_::_serde::Serialize`
    |                                          |
    |                                          required by a bound introduced by this call
    |
    = note: for local types consider adding `#[derive(serde::Serialize)]` to your `diesel::result::Error` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `active_worker::_::_serde::Serialize`:
              &'a T
              &'a mut T
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
              (T0, T1, T2, T3)
              (T0, T1, T2, T3, T4)
            and 191 others
    = note: required for `Result<UserLLMConfig, diesel::result::Error>` to implement `active_worker::_::_serde::Serialize`
note: required by a bound in `HttpResponseBuilder::json`
   --> /Users/n/.cargo/registry/src/index.crates.io-6f17d22bba15001f/actix-web-4.9.0/src/response/builder.rs:333:40
    |
333 |     pub fn json(&mut self, value: impl Serialize) -> HttpResponse {
    |                                        ^^^^^^^^^ required by this bound in `HttpResponseBuilder::json`

warning: unused variable: `user_id`
   --> src/services/job_service.rs:107:57
    |
107 |     pub async fn start_job(pool: &DbPool, job_id: Uuid, user_id: Uuid) -> Result<Job, AppError> {
    |                                                         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `temp_file_path_clone`
   --> src/services/job_service.rs:185:13
    |
185 |         let temp_file_path_clone = temp_file_path.clone();
    |             ^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_temp_file_path_clone`

warning: unused variable: `user_id`
   --> src/services/job_service.rs:305:56
    |
305 |     pub async fn stop_job(pool: &DbPool, job_id: Uuid, user_id: Uuid) -> Result<Job, AppError> {
    |                                                        ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
   --> src/services/job_service.rs:332:9
    |
332 |         user_id: Uuid,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
   --> src/services/job_service.rs:348:9
    |
348 |         user_id: Uuid,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
   --> src/services/job_service.rs:364:9
    |
364 |         user_id: Uuid,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
   --> src/services/job_service.rs:380:9
    |
380 |         user_id: Uuid,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

error[E0308]: mismatched types
  --> src/services/chat_service.rs:27:50
   |
27 |         let new_conversation = NewConversation { user_id, title };
   |                                                  ^^^^^^^ expected `Uuid`, found `user_id`

error[E0308]: mismatched types
  --> src/services/chat_service.rs:27:59
   |
27 |         let new_conversation = NewConversation { user_id, title };
   |                                                           ^^^^^ expected `String`, found `title`

error[E0308]: mismatched types
  --> src/services/chat_service.rs:69:13
   |
69 |             conversation_id,
   |             ^^^^^^^^^^^^^^^ expected `Uuid`, found `conversation_id`

error[E0308]: mismatched types
  --> src/services/chat_service.rs:70:13
   |
70 |             role,
   |             ^^^^ expected `String`, found `role`

error[E0308]: mismatched types
  --> src/services/chat_service.rs:71:13
   |
71 |             content,
   |             ^^^^^^^ expected `String`, found `content`

error[E0308]: mismatched types
   --> src/services/chat_service.rs:131:13
    |
131 |             message_id,
    |             ^^^^^^^^^^ expected `Uuid`, found `message_id`

error[E0308]: mismatched types
   --> src/services/chat_service.rs:132:13
    |
132 |             file_type,
    |             ^^^^^^^^^ expected `String`, found `file_type`

error[E0308]: mismatched types
   --> src/services/chat_service.rs:133:13
    |
133 |             file_path,
    |             ^^^^^^^^^ expected `String`, found `file_path`

error[E0308]: mismatched types
   --> src/services/chat_service.rs:174:45
    |
174 |         let new_provider = NewLLMProvider { name, api_endpoint };
    |                                             ^^^^ expected `String`, found `name`

error[E0308]: mismatched types
   --> src/services/chat_service.rs:174:51
    |
174 |         let new_provider = NewLLMProvider { name, api_endpoint };
    |                                                   ^^^^^^^^^^^^ expected `String`, found `api_endpoint`

error[E0308]: mismatched types
   --> src/services/chat_service.rs:216:13
    |
216 |             user_id,
    |             ^^^^^^^ expected `Uuid`, found `user_id`

error[E0308]: mismatched types
   --> src/services/chat_service.rs:217:13
    |
217 |             provider_id,
    |             ^^^^^^^^^^^ expected `Uuid`, found `provider_id`

error[E0308]: mismatched types
   --> src/services/chat_service.rs:218:13
    |
218 |             api_key,
    |             ^^^^^^^ expected `String`, found `api_key`

warning: unused variable: `user_id`
  --> src/services/amber_store_service.rs:19:45
   |
19 |     pub fn list_amber_stores(pool: &DbPool, user_id: Uuid) -> Result<Vec<AmberStore>, AppError> {
   |                                             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/amber_store_service.rs:25:65
   |
25 |     pub fn get_amber_store(pool: &DbPool, amber_store_id: Uuid, user_id: Uuid) -> Result<AmberStore, AppError> {
   |                                                                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/amber_store_service.rs:31:99
   |
31 | ...ate_data: UpdateAmberStore, user_id: Uuid) -> Result<AmberStore, AppError> {
   |                                ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/amber_store_service.rs:40:68
   |
40 |     pub fn delete_amber_store(pool: &DbPool, amber_store_id: Uuid, user_id: Uuid) -> Result<(), AppError> {
   |                                                                    ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `conversation_id`
  --> src/services/chat_service.rs:99:9
   |
99 |         conversation_id: Uuid,
   |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_conversation_id`

warning: unused variable: `message_id`
   --> src/services/chat_service.rs:147:9
    |
147 |         message_id: Uuid,
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_message_id`

warning: unused variable: `user_id`
   --> src/services/chat_service.rs:232:9
    |
232 |         user_id: Uuid,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `provider_id`
   --> src/services/chat_service.rs:233:9
    |
233 |         provider_id: Uuid,
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_provider_id`

warning: unused variable: `user_id`
  --> src/services/configuration_service.rs:20:47
   |
20 |     pub fn list_configurations(pool: &DbPool, user_id: Uuid) -> Result<Vec<Configuration>, AppError> {
   |                                               ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/configuration_service.rs:26:69
   |
26 |     pub fn get_configuration(pool: &DbPool, configuration_id: Uuid, user_id: Uuid) -> Result<Configuration, AppError> {
   |                                                                     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/configuration_service.rs:32:106
   |
32 | ..._data: UpdateConfiguration, user_id: Uuid) -> Result<Configuration, AppError> {
   |                                ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/configuration_service.rs:41:72
   |
41 |     pub fn delete_configuration(pool: &DbPool, configuration_id: Uuid, user_id: Uuid) -> Result<(), AppError> {
   |                                                                        ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/docker_file_service.rs:20:45
   |
20 |     pub fn list_docker_files(pool: &DbPool, user_id: Uuid) -> Result<Vec<DockerFile>, AppError> {
   |                                             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/docker_file_service.rs:26:65
   |
26 |     pub fn get_docker_file(pool: &DbPool, docker_file_id: Uuid, user_id: Uuid) -> Result<DockerFile, AppError> {
   |                                                                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/docker_file_service.rs:32:99
   |
32 | ...ate_data: UpdateDockerFile, user_id: Uuid) -> Result<DockerFile, AppError> {
   |                                ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/docker_file_service.rs:41:68
   |
41 |     pub fn delete_docker_file(pool: &DbPool, docker_file_id: Uuid, user_id: Uuid) -> Result<(), AppError> {
   |                                                                    ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/job_service.rs:36:37
   |
36 |     pub fn list_jobs(pool: &DbPool, user_id: Uuid) -> Result<Vec<Job>, AppError> {
   |                                     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/job_service.rs:45:49
   |
45 |     pub fn get_job(pool: &DbPool, job_id: Uuid, user_id: Uuid) -> Result<Job, AppError> {
   |                                                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/job_service.rs:62:9
   |
62 |         user_id: Uuid,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/job_service.rs:77:52
   |
77 |     pub fn delete_job(pool: &DbPool, job_id: Uuid, user_id: Uuid) -> Result<(), AppError> {
   |                                                    ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/job_service.rs:94:9
   |
94 |         user_id: Uuid,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/pipeline_service.rs:20:42
   |
20 |     pub fn list_pipelines(pool: &DbPool, user_id: Uuid) -> Result<Vec<Pipeline>, AppError> {
   |                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/pipeline_service.rs:32:9
   |
32 |         user_id: Uuid,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/pipeline_service.rs:46:9
   |
46 |         user_id: Uuid,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/pipeline_service.rs:59:9
   |
59 |         user_id: Uuid,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/pipeline_service.rs:72:9
   |
72 |         user_id: Uuid,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/secure_vault_service.rs:28:46
   |
28 |     pub fn list_secure_vaults(pool: &DbPool, user_id: Uuid) -> Result<Vec<SecureVault>, AppError> {
   |                                              ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/secure_vault_service.rs:37:67
   |
37 |     pub fn get_secure_vault(pool: &DbPool, secure_vault_id: Uuid, user_id: Uuid) -> Result<SecureVault, AppError> {
   |                                                                   ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/secure_vault_service.rs:46:102
   |
46 | ...te_data: UpdateSecureVault, user_id: Uuid) -> Result<SecureVault, AppError> {
   |                                ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/secure_vault_service.rs:56:70
   |
56 |     pub fn delete_secure_vault(pool: &DbPool, secure_vault_id: Uuid, user_id: Uuid) -> Result<(), AppError> {
   |                                                                      ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `email`
  --> src/services/user_service.rs:98:40
   |
98 |     pub fn email_exists(pool: &DbPool, email: &str) -> Result<bool, AppError> {
   |                                        ^^^^^ help: if this is intentional, prefix it with an underscore: `_email`

warning: unused variable: `pool`
   --> src/services/user_service.rs:116:26
    |
116 |     pub fn refresh_token(pool: &DbPool, old_token: &str) -> Result<String, AppError> {
    |                          ^^^^ help: if this is intentional, prefix it with an underscore: `_pool`

warning: unused variable: `user_id`
  --> src/services/worker_service.rs:28:40
   |
28 |     pub fn list_workers(pool: &DbPool, user_id: Uuid) -> Result<Vec<Worker>, AppError> {
   |                                        ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/worker_service.rs:34:55
   |
34 |     pub fn get_worker(pool: &DbPool, worker_id: Uuid, user_id: Uuid) -> Result<Worker, AppError> {
   |                                                       ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/worker_service.rs:40:85
   |
40 |     pub fn update_worker(pool: &DbPool, worker_id: Uuid, update_data: UpdateWorker, user_id: Uuid) -> Result<Worker, AppError> {
   |                                                                                     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/worker_service.rs:49:58
   |
49 |     pub fn delete_worker(pool: &DbPool, worker_id: Uuid, user_id: Uuid) -> Result<(), AppError> {
   |                                                          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/worker_service.rs:58:60
   |
58 |     pub fn activate_worker(pool: &DbPool, worker_id: Uuid, user_id: Uuid) -> Result<Worker, AppError> {
   |                                                            ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `user_id`
  --> src/services/worker_service.rs:67:62
   |
67 |     pub fn deactivate_worker(pool: &DbPool, worker_id: Uuid, user_id: Uuid) -> Result<Worker, AppError> {
   |                                                              ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

Some errors have detailed explanations: E0277, E0308, E0532, E0599.
For more information about an error, try `rustc --explain E0277`.
warning: `fws` (lib) generated 64 warnings
error: could not compile `fws` (lib) due to 54 previous errors; 64 warnings emitted
