services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - fws_network

  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    volumes:
      - shared_tmp:/shared_tmp
      - attachment-data:/app/attachments
      - repo_data:/repo  # Persistent volume for /repo
      - worker_logs:/home/worker/logs  # Persistent volume for logs
      - /dev/shm:/dev/shm  # Shared memory for X11
    tmpfs:
      - /tmp:exec,mode=1777
      - /run:exec,mode=1777
      - /tmp/.X11-unix:exec,mode=1777
    environment:
      # Tool configuration
      - TOOL_VERSIONS=20241022
      # Display configuration (must match Anthropic's tool definitions)
      - DISPLAY_WIDTH=1024
      - DISPLAY_HEIGHT=768
      - DISPLAY_NUMBER=99
      - DISPLAY=:99
      # Service configuration
      - AMBER_SECRET=${AMBER_SECRET}
      - AMBER_YAML=/.fluent/amber.yaml
      - FLUENT_STATE_STORE=/shared_tmp/state_store
      - FLUENT_CLI_V2_CONFIG_PATH=/.fluent/default_config_test.json
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=system2024!
      - NEO4J_DB=neo4j
      # Logging configuration
      - RUST_LOG=debug
      - RUST_BACKTRACE=1
      # Path configuration
      - SHARED_TMP_PATH=/shared_tmp
      - ATTACHMENT_DIR=/app/attachments
      # API keys
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - COHERE_API_KEY=${COHERE_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    ports:
      - "8080:8080"  # Original command endpoint
      - "8081:8081"  # Computer use endpoints
      - "5901:5901"  # VNC port
    networks:
      - fws_network
    depends_on:
      neo4j:
        condition: service_healthy
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/computer-use/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    init: true  # Add proper init process
    privileged: true  # Required for X11 operations
    security_opt:
      - seccomp:unconfined  # Needed for X11 operations
    cap_add:
      - SYS_ADMIN  # May be needed for some operations
    shm_size: 2gb  # Increased shared memory for X11
    ulimits:  # Add ulimits for better process handling
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    ipc: host  # Required for proper X11 shared memory

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      worker:
        condition: service_healthy
    volumes:
      - shared_tmp:/shared_tmp
      - attachment-data:/app/attachments:rw
    environment:
      - WORKER_ADDRESS=http://worker:8080/execute
      - WORKER_COMPUTER_ADDRESS=http://worker:8081/computer-use
      - DATABASE_URL=postgres://user:password@db:5432/fws_db
      - NEO4J_URL=bolt://neo4j:7687
      - NEO4J_HOST=neo4j
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - RUST_LOG=debug
      - SHARED_TMP_PATH=/shared_tmp
      - FLUENT_STATE_STORE=/shared_tmp/state_store
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - COHERE_API_KEY=${COHERE_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - ATTACHMENT_DIR=/app/attachments
    networks:
      - fws_network

  management:
    build:
      context: .
      dockerfile: Dockerfile.management
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./migrations:/app/migrations
      - ./diesel.toml:/app/diesel.toml
      - attachment-data:/app/attachments
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PG_HOST: db
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      ATTACHMENT_DIR: /app/attachments
    networks:
      - fws_network
    tty: true
    stdin_open: true

  db:
    image: postgres:13-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PG_HOST: db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - fws_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d fws_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  neo4j:
    image: neo4j:4.4-community
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/system2024!
      - NEO4J_dbms_connector_bolt_advertised__address=:7687
      - NEO4J_dbms_connector_http_advertised__address=:7474
      - NEO4J_dbms_default__listen__address=0.0.0.0
    volumes:
      - neo4j_data:/data
    networks:
      - fws_network
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p system2024! 'MATCH (n) RETURN count(n)' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  neo4j_data:
  shared_tmp:
  attachment-data:
  repo_data:  # Persistent volume for /repo
  worker_logs:  # Persistent volume for worker logs

networks:
  fws_network:
    driver: bridge
